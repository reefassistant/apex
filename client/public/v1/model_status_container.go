/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatusContainer struct for StatusContainer
type StatusContainer struct {
	// The (host) name of the APEX controller.
	Hostname string `json:"hostname"`
	// Software version.
	Software string `json:"software"`
	// Hardware version.
	Hardware string `json:"hardware"`
	// Serial number.
	Serial string `json:"serial"`
	// Controller type.
	Type string `json:"type"`
	// Key/value pairs.
	Extra *map[string]string `json:"extra,omitempty"`
	// Time zone.
	Timezone string         `json:"timezone"`
	Date     int64          `json:"date"`
	Feed     *StatusFeed    `json:"feed,omitempty"`
	Power    *StatusPower   `json:"power,omitempty"`
	Inputs   []StatusInput  `json:"inputs"`
	Outputs  []StatusOutput `json:"outputs"`
	Link     *StatusLink    `json:"link,omitempty"`
}

// NewStatusContainer instantiates a new StatusContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusContainer(hostname string, software string, hardware string, serial string, type_ string, timezone string, date int64, inputs []StatusInput, outputs []StatusOutput) *StatusContainer {
	this := StatusContainer{}
	this.Hostname = hostname
	this.Software = software
	this.Hardware = hardware
	this.Serial = serial
	this.Type = type_
	this.Timezone = timezone
	this.Date = date
	this.Inputs = inputs
	this.Outputs = outputs
	return &this
}

// NewStatusContainerWithDefaults instantiates a new StatusContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusContainerWithDefaults() *StatusContainer {
	this := StatusContainer{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *StatusContainer) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *StatusContainer) SetHostname(v string) {
	o.Hostname = v
}

// GetSoftware returns the Software field value
func (o *StatusContainer) GetSoftware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Software
}

// GetSoftwareOk returns a tuple with the Software field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetSoftwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Software, true
}

// SetSoftware sets field value
func (o *StatusContainer) SetSoftware(v string) {
	o.Software = v
}

// GetHardware returns the Hardware field value
func (o *StatusContainer) GetHardware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetHardwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *StatusContainer) SetHardware(v string) {
	o.Hardware = v
}

// GetSerial returns the Serial field value
func (o *StatusContainer) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *StatusContainer) SetSerial(v string) {
	o.Serial = v
}

// GetType returns the Type field value
func (o *StatusContainer) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StatusContainer) SetType(v string) {
	o.Type = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *StatusContainer) GetExtra() map[string]string {
	if o == nil || o.Extra == nil {
		var ret map[string]string
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetExtraOk() (*map[string]string, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *StatusContainer) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]string and assigns it to the Extra field.
func (o *StatusContainer) SetExtra(v map[string]string) {
	o.Extra = &v
}

// GetTimezone returns the Timezone field value
func (o *StatusContainer) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *StatusContainer) SetTimezone(v string) {
	o.Timezone = v
}

// GetDate returns the Date field value
func (o *StatusContainer) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StatusContainer) SetDate(v int64) {
	o.Date = v
}

// GetFeed returns the Feed field value if set, zero value otherwise.
func (o *StatusContainer) GetFeed() StatusFeed {
	if o == nil || o.Feed == nil {
		var ret StatusFeed
		return ret
	}
	return *o.Feed
}

// GetFeedOk returns a tuple with the Feed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetFeedOk() (*StatusFeed, bool) {
	if o == nil || o.Feed == nil {
		return nil, false
	}
	return o.Feed, true
}

// HasFeed returns a boolean if a field has been set.
func (o *StatusContainer) HasFeed() bool {
	if o != nil && o.Feed != nil {
		return true
	}

	return false
}

// SetFeed gets a reference to the given StatusFeed and assigns it to the Feed field.
func (o *StatusContainer) SetFeed(v StatusFeed) {
	o.Feed = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *StatusContainer) GetPower() StatusPower {
	if o == nil || o.Power == nil {
		var ret StatusPower
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetPowerOk() (*StatusPower, bool) {
	if o == nil || o.Power == nil {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *StatusContainer) HasPower() bool {
	if o != nil && o.Power != nil {
		return true
	}

	return false
}

// SetPower gets a reference to the given StatusPower and assigns it to the Power field.
func (o *StatusContainer) SetPower(v StatusPower) {
	o.Power = &v
}

// GetInputs returns the Inputs field value
func (o *StatusContainer) GetInputs() []StatusInput {
	if o == nil {
		var ret []StatusInput
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetInputsOk() (*[]StatusInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inputs, true
}

// SetInputs sets field value
func (o *StatusContainer) SetInputs(v []StatusInput) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value
func (o *StatusContainer) GetOutputs() []StatusOutput {
	if o == nil {
		var ret []StatusOutput
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetOutputsOk() (*[]StatusOutput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outputs, true
}

// SetOutputs sets field value
func (o *StatusContainer) SetOutputs(v []StatusOutput) {
	o.Outputs = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *StatusContainer) GetLink() StatusLink {
	if o == nil || o.Link == nil {
		var ret StatusLink
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusContainer) GetLinkOk() (*StatusLink, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *StatusContainer) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given StatusLink and assigns it to the Link field.
func (o *StatusContainer) SetLink(v StatusLink) {
	o.Link = &v
}

func (o StatusContainer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["software"] = o.Software
	}
	if true {
		toSerialize["hardware"] = o.Hardware
	}
	if true {
		toSerialize["serial"] = o.Serial
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}
	if true {
		toSerialize["timezone"] = o.Timezone
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if o.Feed != nil {
		toSerialize["feed"] = o.Feed
	}
	if o.Power != nil {
		toSerialize["power"] = o.Power
	}
	if true {
		toSerialize["inputs"] = o.Inputs
	}
	if true {
		toSerialize["outputs"] = o.Outputs
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	return json.Marshal(toSerialize)
}

type NullableStatusContainer struct {
	value *StatusContainer
	isSet bool
}

func (v NullableStatusContainer) Get() *StatusContainer {
	return v.value
}

func (v *NullableStatusContainer) Set(val *StatusContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusContainer(val *StatusContainer) *NullableStatusContainer {
	return &NullableStatusContainer{value: val, isSet: true}
}

func (v NullableStatusContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
