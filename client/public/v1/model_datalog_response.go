/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DatalogResponse struct for DatalogResponse
type DatalogResponse struct {
	Ilog DatalogContainer `json:"ilog"`
}

// NewDatalogResponse instantiates a new DatalogResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatalogResponse(ilog DatalogContainer) *DatalogResponse {
	this := DatalogResponse{}
	this.Ilog = ilog
	return &this
}

// NewDatalogResponseWithDefaults instantiates a new DatalogResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatalogResponseWithDefaults() *DatalogResponse {
	this := DatalogResponse{}
	return &this
}

// GetIlog returns the Ilog field value
func (o *DatalogResponse) GetIlog() DatalogContainer {
	if o == nil {
		var ret DatalogContainer
		return ret
	}

	return o.Ilog
}

// GetIlogOk returns a tuple with the Ilog field value
// and a boolean to check if the value has been set.
func (o *DatalogResponse) GetIlogOk() (*DatalogContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ilog, true
}

// SetIlog sets field value
func (o *DatalogResponse) SetIlog(v DatalogContainer) {
	o.Ilog = v
}

func (o DatalogResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ilog"] = o.Ilog
	}
	return json.Marshal(toSerialize)
}

type NullableDatalogResponse struct {
	value *DatalogResponse
	isSet bool
}

func (v NullableDatalogResponse) Get() *DatalogResponse {
	return v.value
}

func (v *NullableDatalogResponse) Set(val *DatalogResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDatalogResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDatalogResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatalogResponse(val *DatalogResponse) *NullableDatalogResponse {
	return &NullableDatalogResponse{value: val, isSet: true}
}

func (v NullableDatalogResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatalogResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
