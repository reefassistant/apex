/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DatalogRecord struct for DatalogRecord
type DatalogRecord struct {
	Date int64         `json:"date"`
	Data []DatalogData `json:"data"`
}

// NewDatalogRecord instantiates a new DatalogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatalogRecord(date int64, data []DatalogData) *DatalogRecord {
	this := DatalogRecord{}
	this.Date = date
	this.Data = data
	return &this
}

// NewDatalogRecordWithDefaults instantiates a new DatalogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatalogRecordWithDefaults() *DatalogRecord {
	this := DatalogRecord{}
	return &this
}

// GetDate returns the Date field value
func (o *DatalogRecord) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *DatalogRecord) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *DatalogRecord) SetDate(v int64) {
	o.Date = v
}

// GetData returns the Data field value
func (o *DatalogRecord) GetData() []DatalogData {
	if o == nil {
		var ret []DatalogData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DatalogRecord) GetDataOk() (*[]DatalogData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DatalogRecord) SetData(v []DatalogData) {
	o.Data = v
}

func (o DatalogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableDatalogRecord struct {
	value *DatalogRecord
	isSet bool
}

func (v NullableDatalogRecord) Get() *DatalogRecord {
	return v.value
}

func (v *NullableDatalogRecord) Set(val *DatalogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDatalogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDatalogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatalogRecord(val *DatalogRecord) *NullableDatalogRecord {
	return &NullableDatalogRecord{value: val, isSet: true}
}

func (v NullableDatalogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatalogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
