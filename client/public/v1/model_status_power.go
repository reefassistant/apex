/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatusPower struct for StatusPower
type StatusPower struct {
	Failed   *int64 `json:"failed,omitempty"`
	Restored *int64 `json:"restored,omitempty"`
}

// NewStatusPower instantiates a new StatusPower object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusPower() *StatusPower {
	this := StatusPower{}
	return &this
}

// NewStatusPowerWithDefaults instantiates a new StatusPower object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusPowerWithDefaults() *StatusPower {
	this := StatusPower{}
	return &this
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *StatusPower) GetFailed() int64 {
	if o == nil || o.Failed == nil {
		var ret int64
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusPower) GetFailedOk() (*int64, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *StatusPower) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int64 and assigns it to the Failed field.
func (o *StatusPower) SetFailed(v int64) {
	o.Failed = &v
}

// GetRestored returns the Restored field value if set, zero value otherwise.
func (o *StatusPower) GetRestored() int64 {
	if o == nil || o.Restored == nil {
		var ret int64
		return ret
	}
	return *o.Restored
}

// GetRestoredOk returns a tuple with the Restored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusPower) GetRestoredOk() (*int64, bool) {
	if o == nil || o.Restored == nil {
		return nil, false
	}
	return o.Restored, true
}

// HasRestored returns a boolean if a field has been set.
func (o *StatusPower) HasRestored() bool {
	if o != nil && o.Restored != nil {
		return true
	}

	return false
}

// SetRestored gets a reference to the given int64 and assigns it to the Restored field.
func (o *StatusPower) SetRestored(v int64) {
	o.Restored = &v
}

func (o StatusPower) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.Restored != nil {
		toSerialize["restored"] = o.Restored
	}
	return json.Marshal(toSerialize)
}

type NullableStatusPower struct {
	value *StatusPower
	isSet bool
}

func (v NullableStatusPower) Get() *StatusPower {
	return v.value
}

func (v *NullableStatusPower) Set(val *StatusPower) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusPower) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusPower) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusPower(val *StatusPower) *NullableStatusPower {
	return &NullableStatusPower{value: val, isSet: true}
}

func (v NullableStatusPower) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusPower) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
