/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DatalogContainer struct for DatalogContainer
type DatalogContainer struct {
	// The (host) name of the APEX controller.
	Hostname string `json:"hostname"`
	// Software version.
	Software string `json:"software"`
	// Hardware version.
	Hardware string `json:"hardware"`
	// Serial number.
	Serial string `json:"serial"`
	// Controller type.
	Type string `json:"type"`
	// Key/value pairs.
	Extra *map[string]string `json:"extra,omitempty"`
	// Time zone.
	Timezone string          `json:"timezone"`
	Record   []DatalogRecord `json:"record"`
}

// NewDatalogContainer instantiates a new DatalogContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatalogContainer(hostname string, software string, hardware string, serial string, type_ string, timezone string, record []DatalogRecord) *DatalogContainer {
	this := DatalogContainer{}
	this.Hostname = hostname
	this.Software = software
	this.Hardware = hardware
	this.Serial = serial
	this.Type = type_
	this.Timezone = timezone
	this.Record = record
	return &this
}

// NewDatalogContainerWithDefaults instantiates a new DatalogContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatalogContainerWithDefaults() *DatalogContainer {
	this := DatalogContainer{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *DatalogContainer) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *DatalogContainer) SetHostname(v string) {
	o.Hostname = v
}

// GetSoftware returns the Software field value
func (o *DatalogContainer) GetSoftware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Software
}

// GetSoftwareOk returns a tuple with the Software field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetSoftwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Software, true
}

// SetSoftware sets field value
func (o *DatalogContainer) SetSoftware(v string) {
	o.Software = v
}

// GetHardware returns the Hardware field value
func (o *DatalogContainer) GetHardware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetHardwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *DatalogContainer) SetHardware(v string) {
	o.Hardware = v
}

// GetSerial returns the Serial field value
func (o *DatalogContainer) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *DatalogContainer) SetSerial(v string) {
	o.Serial = v
}

// GetType returns the Type field value
func (o *DatalogContainer) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatalogContainer) SetType(v string) {
	o.Type = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *DatalogContainer) GetExtra() map[string]string {
	if o == nil || o.Extra == nil {
		var ret map[string]string
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetExtraOk() (*map[string]string, bool) {
	if o == nil || o.Extra == nil {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *DatalogContainer) HasExtra() bool {
	if o != nil && o.Extra != nil {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]string and assigns it to the Extra field.
func (o *DatalogContainer) SetExtra(v map[string]string) {
	o.Extra = &v
}

// GetTimezone returns the Timezone field value
func (o *DatalogContainer) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *DatalogContainer) SetTimezone(v string) {
	o.Timezone = v
}

// GetRecord returns the Record field value
func (o *DatalogContainer) GetRecord() []DatalogRecord {
	if o == nil {
		var ret []DatalogRecord
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *DatalogContainer) GetRecordOk() (*[]DatalogRecord, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *DatalogContainer) SetRecord(v []DatalogRecord) {
	o.Record = v
}

func (o DatalogContainer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if true {
		toSerialize["software"] = o.Software
	}
	if true {
		toSerialize["hardware"] = o.Hardware
	}
	if true {
		toSerialize["serial"] = o.Serial
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Extra != nil {
		toSerialize["extra"] = o.Extra
	}
	if true {
		toSerialize["timezone"] = o.Timezone
	}
	if true {
		toSerialize["record"] = o.Record
	}
	return json.Marshal(toSerialize)
}

type NullableDatalogContainer struct {
	value *DatalogContainer
	isSet bool
}

func (v NullableDatalogContainer) Get() *DatalogContainer {
	return v.value
}

func (v *NullableDatalogContainer) Set(val *DatalogContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableDatalogContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableDatalogContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatalogContainer(val *DatalogContainer) *NullableDatalogContainer {
	return &NullableDatalogContainer{value: val, isSet: true}
}

func (v NullableDatalogContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatalogContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
