/*
Apex Public API

Public (unauthenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// OutlogRecord struct for OutlogRecord
type OutlogRecord struct {
	Date int64 `json:"date"`
	// did
	Did string `json:"did"`
	// name
	Name string `json:"name"`
	// value
	Value string `json:"value"`
}

// NewOutlogRecord instantiates a new OutlogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlogRecord(date int64, did string, name string, value string) *OutlogRecord {
	this := OutlogRecord{}
	this.Date = date
	this.Did = did
	this.Name = name
	this.Value = value
	return &this
}

// NewOutlogRecordWithDefaults instantiates a new OutlogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlogRecordWithDefaults() *OutlogRecord {
	this := OutlogRecord{}
	return &this
}

// GetDate returns the Date field value
func (o *OutlogRecord) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *OutlogRecord) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *OutlogRecord) SetDate(v int64) {
	o.Date = v
}

// GetDid returns the Did field value
func (o *OutlogRecord) GetDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Did
}

// GetDidOk returns a tuple with the Did field value
// and a boolean to check if the value has been set.
func (o *OutlogRecord) GetDidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Did, true
}

// SetDid sets field value
func (o *OutlogRecord) SetDid(v string) {
	o.Did = v
}

// GetName returns the Name field value
func (o *OutlogRecord) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OutlogRecord) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutlogRecord) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *OutlogRecord) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OutlogRecord) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OutlogRecord) SetValue(v string) {
	o.Value = v
}

func (o OutlogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["did"] = o.Did
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableOutlogRecord struct {
	value *OutlogRecord
	isSet bool
}

func (v NullableOutlogRecord) Get() *OutlogRecord {
	return v.value
}

func (v *NullableOutlogRecord) Set(val *OutlogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlogRecord(val *OutlogRecord) *NullableOutlogRecord {
	return &NullableOutlogRecord{value: val, isSet: true}
}

func (v NullableOutlogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
