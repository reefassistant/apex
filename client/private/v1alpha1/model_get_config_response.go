/*
Apex Private API

Private (authenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

// GetConfigResponse struct for GetConfigResponse
type GetConfigResponse struct {
	Oconf  []OutputConfig      `json:"oconf"`
	Pconf  []ProfileConfig     `json:"pconf"`
	Mconf  []ModuleConfig      `json:"mconf"`
	Dconf  []DisplayConfig     `json:"dconf"`
	Iconf  []InputConfig       `json:"iconf"`
	Nconf  NetworkConfig       `json:"nconf"`
	Clock  ClockConfig         `json:"clock"`
	Misc   MiscellaneousConfig `json:"misc"`
	Season SeasonConfig        `json:"season"`
	Cal    CalibrationConfig   `json:"cal"`
}

// NewGetConfigResponse instantiates a new GetConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetConfigResponse(oconf []OutputConfig, pconf []ProfileConfig, mconf []ModuleConfig, dconf []DisplayConfig, iconf []InputConfig, nconf NetworkConfig, clock ClockConfig, misc MiscellaneousConfig, season SeasonConfig, cal CalibrationConfig) *GetConfigResponse {
	this := GetConfigResponse{}
	this.Oconf = oconf
	this.Pconf = pconf
	this.Mconf = mconf
	this.Dconf = dconf
	this.Iconf = iconf
	this.Nconf = nconf
	this.Clock = clock
	this.Misc = misc
	this.Season = season
	this.Cal = cal
	return &this
}

// NewGetConfigResponseWithDefaults instantiates a new GetConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetConfigResponseWithDefaults() *GetConfigResponse {
	this := GetConfigResponse{}
	return &this
}

// GetOconf returns the Oconf field value
func (o *GetConfigResponse) GetOconf() []OutputConfig {
	if o == nil {
		var ret []OutputConfig
		return ret
	}

	return o.Oconf
}

// GetOconfOk returns a tuple with the Oconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetOconfOk() (*[]OutputConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oconf, true
}

// SetOconf sets field value
func (o *GetConfigResponse) SetOconf(v []OutputConfig) {
	o.Oconf = v
}

// GetPconf returns the Pconf field value
func (o *GetConfigResponse) GetPconf() []ProfileConfig {
	if o == nil {
		var ret []ProfileConfig
		return ret
	}

	return o.Pconf
}

// GetPconfOk returns a tuple with the Pconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetPconfOk() (*[]ProfileConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pconf, true
}

// SetPconf sets field value
func (o *GetConfigResponse) SetPconf(v []ProfileConfig) {
	o.Pconf = v
}

// GetMconf returns the Mconf field value
func (o *GetConfigResponse) GetMconf() []ModuleConfig {
	if o == nil {
		var ret []ModuleConfig
		return ret
	}

	return o.Mconf
}

// GetMconfOk returns a tuple with the Mconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetMconfOk() (*[]ModuleConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mconf, true
}

// SetMconf sets field value
func (o *GetConfigResponse) SetMconf(v []ModuleConfig) {
	o.Mconf = v
}

// GetDconf returns the Dconf field value
func (o *GetConfigResponse) GetDconf() []DisplayConfig {
	if o == nil {
		var ret []DisplayConfig
		return ret
	}

	return o.Dconf
}

// GetDconfOk returns a tuple with the Dconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetDconfOk() (*[]DisplayConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dconf, true
}

// SetDconf sets field value
func (o *GetConfigResponse) SetDconf(v []DisplayConfig) {
	o.Dconf = v
}

// GetIconf returns the Iconf field value
func (o *GetConfigResponse) GetIconf() []InputConfig {
	if o == nil {
		var ret []InputConfig
		return ret
	}

	return o.Iconf
}

// GetIconfOk returns a tuple with the Iconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetIconfOk() (*[]InputConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iconf, true
}

// SetIconf sets field value
func (o *GetConfigResponse) SetIconf(v []InputConfig) {
	o.Iconf = v
}

// GetNconf returns the Nconf field value
func (o *GetConfigResponse) GetNconf() NetworkConfig {
	if o == nil {
		var ret NetworkConfig
		return ret
	}

	return o.Nconf
}

// GetNconfOk returns a tuple with the Nconf field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetNconfOk() (*NetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nconf, true
}

// SetNconf sets field value
func (o *GetConfigResponse) SetNconf(v NetworkConfig) {
	o.Nconf = v
}

// GetClock returns the Clock field value
func (o *GetConfigResponse) GetClock() ClockConfig {
	if o == nil {
		var ret ClockConfig
		return ret
	}

	return o.Clock
}

// GetClockOk returns a tuple with the Clock field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetClockOk() (*ClockConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Clock, true
}

// SetClock sets field value
func (o *GetConfigResponse) SetClock(v ClockConfig) {
	o.Clock = v
}

// GetMisc returns the Misc field value
func (o *GetConfigResponse) GetMisc() MiscellaneousConfig {
	if o == nil {
		var ret MiscellaneousConfig
		return ret
	}

	return o.Misc
}

// GetMiscOk returns a tuple with the Misc field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetMiscOk() (*MiscellaneousConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Misc, true
}

// SetMisc sets field value
func (o *GetConfigResponse) SetMisc(v MiscellaneousConfig) {
	o.Misc = v
}

// GetSeason returns the Season field value
func (o *GetConfigResponse) GetSeason() SeasonConfig {
	if o == nil {
		var ret SeasonConfig
		return ret
	}

	return o.Season
}

// GetSeasonOk returns a tuple with the Season field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetSeasonOk() (*SeasonConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Season, true
}

// SetSeason sets field value
func (o *GetConfigResponse) SetSeason(v SeasonConfig) {
	o.Season = v
}

// GetCal returns the Cal field value
func (o *GetConfigResponse) GetCal() CalibrationConfig {
	if o == nil {
		var ret CalibrationConfig
		return ret
	}

	return o.Cal
}

// GetCalOk returns a tuple with the Cal field value
// and a boolean to check if the value has been set.
func (o *GetConfigResponse) GetCalOk() (*CalibrationConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cal, true
}

// SetCal sets field value
func (o *GetConfigResponse) SetCal(v CalibrationConfig) {
	o.Cal = v
}

func (o GetConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["oconf"] = o.Oconf
	}
	if true {
		toSerialize["pconf"] = o.Pconf
	}
	if true {
		toSerialize["mconf"] = o.Mconf
	}
	if true {
		toSerialize["dconf"] = o.Dconf
	}
	if true {
		toSerialize["iconf"] = o.Iconf
	}
	if true {
		toSerialize["nconf"] = o.Nconf
	}
	if true {
		toSerialize["clock"] = o.Clock
	}
	if true {
		toSerialize["misc"] = o.Misc
	}
	if true {
		toSerialize["season"] = o.Season
	}
	if true {
		toSerialize["cal"] = o.Cal
	}
	return json.Marshal(toSerialize)
}

type NullableGetConfigResponse struct {
	value *GetConfigResponse
	isSet bool
}

func (v NullableGetConfigResponse) Get() *GetConfigResponse {
	return v.value
}

func (v *NullableGetConfigResponse) Set(val *GetConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConfigResponse(val *GetConfigResponse) *NullableGetConfigResponse {
	return &NullableGetConfigResponse{value: val, isSet: true}
}

func (v NullableGetConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
