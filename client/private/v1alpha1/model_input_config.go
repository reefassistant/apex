/*
Apex Private API

Private (authenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

// InputConfig struct for InputConfig
type InputConfig struct {
	Did    string `json:"did"`
	Enable bool   `json:"enable"`
	Type   string `json:"type"`
	Name   string `json:"name"`
	// Key/float pairs.
	Alarm map[string]float32                `json:"alarm"`
	Extra map[string]map[string]interface{} `json:"extra"`
}

// NewInputConfig instantiates a new InputConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputConfig(did string, enable bool, type_ string, name string, alarm map[string]float32, extra map[string]map[string]interface{}) *InputConfig {
	this := InputConfig{}
	this.Did = did
	this.Enable = enable
	this.Type = type_
	this.Name = name
	this.Alarm = alarm
	this.Extra = extra
	return &this
}

// NewInputConfigWithDefaults instantiates a new InputConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputConfigWithDefaults() *InputConfig {
	this := InputConfig{}
	return &this
}

// GetDid returns the Did field value
func (o *InputConfig) GetDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Did
}

// GetDidOk returns a tuple with the Did field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetDidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Did, true
}

// SetDid sets field value
func (o *InputConfig) SetDid(v string) {
	o.Did = v
}

// GetEnable returns the Enable field value
func (o *InputConfig) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *InputConfig) SetEnable(v bool) {
	o.Enable = v
}

// GetType returns the Type field value
func (o *InputConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InputConfig) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *InputConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InputConfig) SetName(v string) {
	o.Name = v
}

// GetAlarm returns the Alarm field value
func (o *InputConfig) GetAlarm() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Alarm
}

// GetAlarmOk returns a tuple with the Alarm field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetAlarmOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alarm, true
}

// SetAlarm sets field value
func (o *InputConfig) SetAlarm(v map[string]float32) {
	o.Alarm = v
}

// GetExtra returns the Extra field value
func (o *InputConfig) GetExtra() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *InputConfig) GetExtraOk() (*map[string]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extra, true
}

// SetExtra sets field value
func (o *InputConfig) SetExtra(v map[string]map[string]interface{}) {
	o.Extra = v
}

func (o InputConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["did"] = o.Did
	}
	if true {
		toSerialize["enable"] = o.Enable
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["alarm"] = o.Alarm
	}
	if true {
		toSerialize["extra"] = o.Extra
	}
	return json.Marshal(toSerialize)
}

type NullableInputConfig struct {
	value *InputConfig
	isSet bool
}

func (v NullableInputConfig) Get() *InputConfig {
	return v.value
}

func (v *NullableInputConfig) Set(val *InputConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInputConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInputConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputConfig(val *InputConfig) *NullableInputConfig {
	return &NullableInputConfig{value: val, isSet: true}
}

func (v NullableInputConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
