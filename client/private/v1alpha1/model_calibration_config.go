/*
Apex Private API

Private (authenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

// CalibrationConfig struct for CalibrationConfig
type CalibrationConfig struct {
	Did   string  `json:"did"`
	Value float32 `json:"value"`
	State float32 `json:"state"`
}

// NewCalibrationConfig instantiates a new CalibrationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalibrationConfig(did string, value float32, state float32) *CalibrationConfig {
	this := CalibrationConfig{}
	this.Did = did
	this.Value = value
	this.State = state
	return &this
}

// NewCalibrationConfigWithDefaults instantiates a new CalibrationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalibrationConfigWithDefaults() *CalibrationConfig {
	this := CalibrationConfig{}
	return &this
}

// GetDid returns the Did field value
func (o *CalibrationConfig) GetDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Did
}

// GetDidOk returns a tuple with the Did field value
// and a boolean to check if the value has been set.
func (o *CalibrationConfig) GetDidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Did, true
}

// SetDid sets field value
func (o *CalibrationConfig) SetDid(v string) {
	o.Did = v
}

// GetValue returns the Value field value
func (o *CalibrationConfig) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CalibrationConfig) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CalibrationConfig) SetValue(v float32) {
	o.Value = v
}

// GetState returns the State field value
func (o *CalibrationConfig) GetState() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CalibrationConfig) GetStateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CalibrationConfig) SetState(v float32) {
	o.State = v
}

func (o CalibrationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["did"] = o.Did
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableCalibrationConfig struct {
	value *CalibrationConfig
	isSet bool
}

func (v NullableCalibrationConfig) Get() *CalibrationConfig {
	return v.value
}

func (v *NullableCalibrationConfig) Set(val *CalibrationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCalibrationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCalibrationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalibrationConfig(val *CalibrationConfig) *NullableCalibrationConfig {
	return &NullableCalibrationConfig{value: val, isSet: true}
}

func (v NullableCalibrationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalibrationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
