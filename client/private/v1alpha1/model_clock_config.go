/*
Apex Private API

Private (authenticated) API to integrate with your local Apex aquarium controller (AOS 5 compatible).

API version: 1.0.0-alpha.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

// ClockConfig struct for ClockConfig
type ClockConfig struct {
	Timezone []string `json:"timezone"`
	Date     int64    `json:"date"`
	Dst      bool     `json:"dst"`
	Auto     bool     `json:"auto"`
}

// NewClockConfig instantiates a new ClockConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClockConfig(timezone []string, date int64, dst bool, auto bool) *ClockConfig {
	this := ClockConfig{}
	this.Timezone = timezone
	this.Date = date
	this.Dst = dst
	this.Auto = auto
	return &this
}

// NewClockConfigWithDefaults instantiates a new ClockConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClockConfigWithDefaults() *ClockConfig {
	this := ClockConfig{}
	return &this
}

// GetTimezone returns the Timezone field value
func (o *ClockConfig) GetTimezone() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *ClockConfig) GetTimezoneOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *ClockConfig) SetTimezone(v []string) {
	o.Timezone = v
}

// GetDate returns the Date field value
func (o *ClockConfig) GetDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ClockConfig) GetDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ClockConfig) SetDate(v int64) {
	o.Date = v
}

// GetDst returns the Dst field value
func (o *ClockConfig) GetDst() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dst
}

// GetDstOk returns a tuple with the Dst field value
// and a boolean to check if the value has been set.
func (o *ClockConfig) GetDstOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dst, true
}

// SetDst sets field value
func (o *ClockConfig) SetDst(v bool) {
	o.Dst = v
}

// GetAuto returns the Auto field value
func (o *ClockConfig) GetAuto() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Auto
}

// GetAutoOk returns a tuple with the Auto field value
// and a boolean to check if the value has been set.
func (o *ClockConfig) GetAutoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Auto, true
}

// SetAuto sets field value
func (o *ClockConfig) SetAuto(v bool) {
	o.Auto = v
}

func (o ClockConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timezone"] = o.Timezone
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["dst"] = o.Dst
	}
	if true {
		toSerialize["auto"] = o.Auto
	}
	return json.Marshal(toSerialize)
}

type NullableClockConfig struct {
	value *ClockConfig
	isSet bool
}

func (v NullableClockConfig) Get() *ClockConfig {
	return v.value
}

func (v *NullableClockConfig) Set(val *ClockConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableClockConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableClockConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClockConfig(val *ClockConfig) *NullableClockConfig {
	return &NullableClockConfig{value: val, isSet: true}
}

func (v NullableClockConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClockConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
